// <auto-generated />
using System;
using ECommercePlatform.Infrastructure;

//using ECommercePlatform.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommercePlatform.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250502095235_UpdateSeedData")]
    partial class UpdateSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AddressCart", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressesId", "CartsId");

                    b.HasIndex("CartsId");

                    b.ToTable("AddressCart");
                });

            modelBuilder.Entity("AddressCartItem", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressesId", "CartItemsId");

                    b.HasIndex("CartItemsId");

                    b.ToTable("AddressCartItem");
                });

            modelBuilder.Entity("AddressCoupen", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoupensId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressesId", "CoupensId");

                    b.HasIndex("CoupensId");

                    b.ToTable("AddressCoupen");
                });

            modelBuilder.Entity("AddressOrder", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressesId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("AddressOrder");
                });

            modelBuilder.Entity("AddressOrderItem", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressesId", "OrderItemsId");

                    b.HasIndex("OrderItemsId");

                    b.ToTable("AddressOrderItem");
                });

            modelBuilder.Entity("AddressProduct", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("AddressProduct");
                });

            modelBuilder.Entity("AddressProductVarient", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVarientsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressesId", "ProductVarientsId");

                    b.HasIndex("ProductVarientsId");

                    b.ToTable("AddressProductVarient");
                });

            modelBuilder.Entity("AddressReview", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressesId", "ReviewsId");

                    b.HasIndex("ReviewsId");

                    b.ToTable("AddressReview");
                });

            modelBuilder.Entity("AddressSetting", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressesId", "SettingsId");

                    b.HasIndex("SettingsId");

                    b.ToTable("AddressSetting");
                });

            modelBuilder.Entity("AddressShippingAddress", b =>
                {
                    b.Property<Guid>("AddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShippingAddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressesId", "ShippingAddressesId");

                    b.HasIndex("ShippingAddressesId");

                    b.ToTable("AddressShippingAddress");
                });

            modelBuilder.Entity("CartCity", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "CitiesId");

                    b.HasIndex("CitiesId");

                    b.ToTable("CartCity");
                });

            modelBuilder.Entity("CartCountry", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "CountriesId");

                    b.HasIndex("CountriesId");

                    b.ToTable("CartCountry");
                });

            modelBuilder.Entity("CartCoupen", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoupensId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "CoupensId");

                    b.HasIndex("CoupensId");

                    b.ToTable("CartCoupen");
                });

            modelBuilder.Entity("CartItemCity", b =>
                {
                    b.Property<Guid>("CartItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemsId", "CitiesId");

                    b.HasIndex("CitiesId");

                    b.ToTable("CartItemCity");
                });

            modelBuilder.Entity("CartItemCountry", b =>
                {
                    b.Property<Guid>("CartItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemsId", "CountriesId");

                    b.HasIndex("CountriesId");

                    b.ToTable("CartItemCountry");
                });

            modelBuilder.Entity("CartItemCoupen", b =>
                {
                    b.Property<Guid>("CartItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoupensId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemsId", "CoupensId");

                    b.HasIndex("CoupensId");

                    b.ToTable("CartItemCoupen");
                });

            modelBuilder.Entity("CartItemOrder", b =>
                {
                    b.Property<Guid>("CartItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemsId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("CartItemOrder");
                });

            modelBuilder.Entity("CartItemOrderItem", b =>
                {
                    b.Property<Guid>("CartItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemsId", "OrderItemsId");

                    b.HasIndex("OrderItemsId");

                    b.ToTable("CartItemOrderItem");
                });

            modelBuilder.Entity("CartItemReview", b =>
                {
                    b.Property<Guid>("CartItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemsId", "ReviewsId");

                    b.HasIndex("ReviewsId");

                    b.ToTable("CartItemReview");
                });

            modelBuilder.Entity("CartItemSetting", b =>
                {
                    b.Property<Guid>("CartItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemsId", "SettingsId");

                    b.HasIndex("SettingsId");

                    b.ToTable("CartItemSetting");
                });

            modelBuilder.Entity("CartItemShippingAddress", b =>
                {
                    b.Property<Guid>("CartItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShippingAddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemsId", "ShippingAddressesId");

                    b.HasIndex("ShippingAddressesId");

                    b.ToTable("CartItemShippingAddress");
                });

            modelBuilder.Entity("CartItemState", b =>
                {
                    b.Property<Guid>("CartItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemsId", "StatesId");

                    b.HasIndex("StatesId");

                    b.ToTable("CartItemState");
                });

            modelBuilder.Entity("CartItemUser", b =>
                {
                    b.Property<Guid>("CartItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartItemsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CartItemUser");
                });

            modelBuilder.Entity("CartOrder", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("CartOrder");
                });

            modelBuilder.Entity("CartOrderItem", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "OrderItemsId");

                    b.HasIndex("OrderItemsId");

                    b.ToTable("CartOrderItem");
                });

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("CartProductVarient", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVarientsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "ProductVarientsId");

                    b.HasIndex("ProductVarientsId");

                    b.ToTable("CartProductVarient");
                });

            modelBuilder.Entity("CartReview", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "ReviewsId");

                    b.HasIndex("ReviewsId");

                    b.ToTable("CartReview");
                });

            modelBuilder.Entity("CartSetting", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "SettingsId");

                    b.HasIndex("SettingsId");

                    b.ToTable("CartSetting");
                });

            modelBuilder.Entity("CartShippingAddress", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShippingAddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "ShippingAddressesId");

                    b.HasIndex("ShippingAddressesId");

                    b.ToTable("CartShippingAddress");
                });

            modelBuilder.Entity("CartState", b =>
                {
                    b.Property<Guid>("CartsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartsId", "StatesId");

                    b.HasIndex("StatesId");

                    b.ToTable("CartState");
                });

            modelBuilder.Entity("CityCountry", b =>
                {
                    b.Property<Guid>("CitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CitiesId", "CountriesId");

                    b.HasIndex("CountriesId");

                    b.ToTable("CityCountry");
                });

            modelBuilder.Entity("CityCoupen", b =>
                {
                    b.Property<Guid>("CitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoupensId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CitiesId", "CoupensId");

                    b.HasIndex("CoupensId");

                    b.ToTable("CityCoupen");
                });

            modelBuilder.Entity("CityOrder", b =>
                {
                    b.Property<Guid>("CitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CitiesId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("CityOrder");
                });

            modelBuilder.Entity("CityOrderItem", b =>
                {
                    b.Property<Guid>("CitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CitiesId", "OrderItemsId");

                    b.HasIndex("OrderItemsId");

                    b.ToTable("CityOrderItem");
                });

            modelBuilder.Entity("CityProduct", b =>
                {
                    b.Property<Guid>("CitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CitiesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CityProduct");
                });

            modelBuilder.Entity("CityProductVarient", b =>
                {
                    b.Property<Guid>("CitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVarientsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CitiesId", "ProductVarientsId");

                    b.HasIndex("ProductVarientsId");

                    b.ToTable("CityProductVarient");
                });

            modelBuilder.Entity("CityReview", b =>
                {
                    b.Property<Guid>("CitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CitiesId", "ReviewsId");

                    b.HasIndex("ReviewsId");

                    b.ToTable("CityReview");
                });

            modelBuilder.Entity("CitySetting", b =>
                {
                    b.Property<Guid>("CitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CitiesId", "SettingsId");

                    b.HasIndex("SettingsId");

                    b.ToTable("CitySetting");
                });

            modelBuilder.Entity("CityUser", b =>
                {
                    b.Property<Guid>("CitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CitiesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CityUser");
                });

            modelBuilder.Entity("CountryCoupen", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoupensId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountriesId", "CoupensId");

                    b.HasIndex("CoupensId");

                    b.ToTable("CountryCoupen");
                });

            modelBuilder.Entity("CountryOrder", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountriesId", "OrdersId");

                    b.HasIndex("OrdersId");

                    b.ToTable("CountryOrder");
                });

            modelBuilder.Entity("CountryOrderItem", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountriesId", "OrderItemsId");

                    b.HasIndex("OrderItemsId");

                    b.ToTable("CountryOrderItem");
                });

            modelBuilder.Entity("CountryProduct", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CountryProduct");
                });

            modelBuilder.Entity("CountryProductVarient", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVarientsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountriesId", "ProductVarientsId");

                    b.HasIndex("ProductVarientsId");

                    b.ToTable("CountryProductVarient");
                });

            modelBuilder.Entity("CountryReview", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountriesId", "ReviewsId");

                    b.HasIndex("ReviewsId");

                    b.ToTable("CountryReview");
                });

            modelBuilder.Entity("CountrySetting", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountriesId", "SettingsId");

                    b.HasIndex("SettingsId");

                    b.ToTable("CountrySetting");
                });

            modelBuilder.Entity("CountryUser", b =>
                {
                    b.Property<Guid>("CountriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CountriesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CountryUser");
                });

            modelBuilder.Entity("CoupenOrderItem", b =>
                {
                    b.Property<Guid>("CoupensId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoupensId", "OrderItemsId");

                    b.HasIndex("OrderItemsId");

                    b.ToTable("CoupenOrderItem");
                });

            modelBuilder.Entity("CoupenReview", b =>
                {
                    b.Property<Guid>("CoupensId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoupensId", "ReviewsId");

                    b.HasIndex("ReviewsId");

                    b.ToTable("CoupenReview");
                });

            modelBuilder.Entity("CoupenSetting", b =>
                {
                    b.Property<Guid>("CoupensId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoupensId", "SettingsId");

                    b.HasIndex("SettingsId");

                    b.ToTable("CoupenSetting");
                });

            modelBuilder.Entity("CoupenShippingAddress", b =>
                {
                    b.Property<Guid>("CoupensId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShippingAddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoupensId", "ShippingAddressesId");

                    b.HasIndex("ShippingAddressesId");

                    b.ToTable("CoupenShippingAddress");
                });

            modelBuilder.Entity("CoupenState", b =>
                {
                    b.Property<Guid>("CoupensId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoupensId", "StatesId");

                    b.HasIndex("StatesId");

                    b.ToTable("CoupenState");
                });

            modelBuilder.Entity("CoupenUser", b =>
                {
                    b.Property<Guid>("CoupensId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoupensId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CoupenUser");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressType")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Line2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Line3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalItems")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CartItemId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVarientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVarientId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("StateId");

                    b.HasIndex("Name", "StateId")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("StateId");

                    b.HasIndex("Name", "Code")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Coupen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DiscountType")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountValue")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedUse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedUsePerProduct")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedUsePerProductVarient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedUsePerUser")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOneTimeUse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<int>("MaximumQuantity")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<decimal>("MaximumValue")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MinimumQuantity")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<decimal>("MinimumValue")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVarientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RemainingUseCount")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("TotalLimitedUseCount")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("TotalUseCount")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidityEndDate")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.Property<int>("ValidityPeriod")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidityStartDate")
                        .HasMaxLength(100)
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVarientId");

                    b.ToTable("Coupens");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoupenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrderStatus")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<Guid>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ShippingAmount")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SubTotal")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalItems")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoupenId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductVarientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("SKU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalPrice")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVarientId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CartItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoupenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductVarientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SKU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tags")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalStockQuantity")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartItemId");

                    b.HasIndex("CoupenId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("ProductVarientId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasFilter("[SKU] IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.ProductVarient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CoupenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SKU")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("StockQuantity")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CartItemId");

                    b.HasIndex("CoupenId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SKU")
                        .IsUnique()
                        .HasFilter("[SKU] IS NOT NULL");

                    b.ToTable("ProductVarients");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReported")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasMaxLength(1)
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryFee")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryFeeType")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<decimal>("FreeDeliveryAbove")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FreeDeliveryAboveType")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TaxRate")
                        .HasMaxLength(20)
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TaxType")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.ShippingAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Line2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Line3")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingAddresses");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ShippingAddressId");

                    b.HasIndex("Code", "CountryId")
                        .IsUnique();

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.HasIndex("Code", "Name", "CountryId")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("ReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid?>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CartId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.HasIndex("ReviewId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e65a3a8a-2407-4965-9b71-b9a1d8e2c34f"),
                            Bio = "System Administrator",
                            ConfirmPassword = "Admin@123",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2025, 5, 2, 3, 18, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateOnly(1990, 1, 1),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            Gender = 0,
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "User",
                            ModifiedBy = "System",
                            ModifiedOn = new DateTime(2025, 5, 2, 3, 18, 0, 0, DateTimeKind.Unspecified),
                            Password = "Admin@123",
                            PhoneNumber = "1234567890",
                            Role = 0
                        });
                });

            modelBuilder.Entity("OrderItemReview", b =>
                {
                    b.Property<Guid>("OrderItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderItemsId", "ReviewsId");

                    b.HasIndex("ReviewsId");

                    b.ToTable("OrderItemReview");
                });

            modelBuilder.Entity("OrderItemSetting", b =>
                {
                    b.Property<Guid>("OrderItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderItemsId", "SettingsId");

                    b.HasIndex("SettingsId");

                    b.ToTable("OrderItemSetting");
                });

            modelBuilder.Entity("OrderItemShippingAddress", b =>
                {
                    b.Property<Guid>("OrderItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShippingAddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderItemsId", "ShippingAddressesId");

                    b.HasIndex("ShippingAddressesId");

                    b.ToTable("OrderItemShippingAddress");
                });

            modelBuilder.Entity("OrderItemState", b =>
                {
                    b.Property<Guid>("OrderItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderItemsId", "StatesId");

                    b.HasIndex("StatesId");

                    b.ToTable("OrderItemState");
                });

            modelBuilder.Entity("OrderItemUser", b =>
                {
                    b.Property<Guid>("OrderItemsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderItemsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("OrderItemUser");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("OrderProductVarient", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductVarientsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdersId", "ProductVarientsId");

                    b.HasIndex("ProductVarientsId");

                    b.ToTable("OrderProductVarient");
                });

            modelBuilder.Entity("OrderReview", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdersId", "ReviewsId");

                    b.HasIndex("ReviewsId");

                    b.ToTable("OrderReview");
                });

            modelBuilder.Entity("OrderSetting", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdersId", "SettingsId");

                    b.HasIndex("SettingsId");

                    b.ToTable("OrderSetting");
                });

            modelBuilder.Entity("OrderState", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdersId", "StatesId");

                    b.HasIndex("StatesId");

                    b.ToTable("OrderState");
                });

            modelBuilder.Entity("ProductSetting", b =>
                {
                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductsId", "SettingsId");

                    b.HasIndex("SettingsId");

                    b.ToTable("ProductSetting");
                });

            modelBuilder.Entity("ProductShippingAddress", b =>
                {
                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShippingAddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductsId", "ShippingAddressesId");

                    b.HasIndex("ShippingAddressesId");

                    b.ToTable("ProductShippingAddress");
                });

            modelBuilder.Entity("ProductState", b =>
                {
                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductsId", "StatesId");

                    b.HasIndex("StatesId");

                    b.ToTable("ProductState");
                });

            modelBuilder.Entity("ProductUser", b =>
                {
                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProductUser");
                });

            modelBuilder.Entity("ProductVarientReview", b =>
                {
                    b.Property<Guid>("ProductVarientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductVarientsId", "ReviewsId");

                    b.HasIndex("ReviewsId");

                    b.ToTable("ProductVarientReview");
                });

            modelBuilder.Entity("ProductVarientSetting", b =>
                {
                    b.Property<Guid>("ProductVarientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductVarientsId", "SettingsId");

                    b.HasIndex("SettingsId");

                    b.ToTable("ProductVarientSetting");
                });

            modelBuilder.Entity("ProductVarientShippingAddress", b =>
                {
                    b.Property<Guid>("ProductVarientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShippingAddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductVarientsId", "ShippingAddressesId");

                    b.HasIndex("ShippingAddressesId");

                    b.ToTable("ProductVarientShippingAddress");
                });

            modelBuilder.Entity("ProductVarientState", b =>
                {
                    b.Property<Guid>("ProductVarientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductVarientsId", "StatesId");

                    b.HasIndex("StatesId");

                    b.ToTable("ProductVarientState");
                });

            modelBuilder.Entity("ProductVarientUser", b =>
                {
                    b.Property<Guid>("ProductVarientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductVarientsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProductVarientUser");
                });

            modelBuilder.Entity("ReviewSetting", b =>
                {
                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewsId", "SettingsId");

                    b.HasIndex("SettingsId");

                    b.ToTable("ReviewSetting");
                });

            modelBuilder.Entity("ReviewShippingAddress", b =>
                {
                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShippingAddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewsId", "ShippingAddressesId");

                    b.HasIndex("ShippingAddressesId");

                    b.ToTable("ReviewShippingAddress");
                });

            modelBuilder.Entity("ReviewState", b =>
                {
                    b.Property<Guid>("ReviewsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReviewsId", "StatesId");

                    b.HasIndex("StatesId");

                    b.ToTable("ReviewState");
                });

            modelBuilder.Entity("SettingShippingAddress", b =>
                {
                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShippingAddressesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SettingsId", "ShippingAddressesId");

                    b.HasIndex("ShippingAddressesId");

                    b.ToTable("SettingShippingAddress");
                });

            modelBuilder.Entity("SettingState", b =>
                {
                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SettingsId", "StatesId");

                    b.HasIndex("StatesId");

                    b.ToTable("SettingState");
                });

            modelBuilder.Entity("SettingUser", b =>
                {
                    b.Property<Guid>("SettingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SettingsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("SettingUser");
                });

            modelBuilder.Entity("StateUser", b =>
                {
                    b.Property<Guid>("StatesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StatesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("StateUser");
                });

            modelBuilder.Entity("AddressCart", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressCartItem", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany()
                        .HasForeignKey("CartItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressCoupen", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany()
                        .HasForeignKey("CoupensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressOrder", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressOrderItem", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressProduct", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressProductVarient", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", null)
                        .WithMany()
                        .HasForeignKey("ProductVarientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressReview", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressSetting", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AddressShippingAddress", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany()
                        .HasForeignKey("ShippingAddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartCity", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartCountry", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartCoupen", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany()
                        .HasForeignKey("CoupensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartItemCity", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany()
                        .HasForeignKey("CartItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartItemCountry", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany()
                        .HasForeignKey("CartItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartItemCoupen", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany()
                        .HasForeignKey("CartItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany()
                        .HasForeignKey("CoupensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartItemOrder", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany()
                        .HasForeignKey("CartItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartItemOrderItem", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany()
                        .HasForeignKey("CartItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartItemReview", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany()
                        .HasForeignKey("CartItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartItemSetting", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany()
                        .HasForeignKey("CartItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartItemShippingAddress", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany()
                        .HasForeignKey("CartItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany()
                        .HasForeignKey("ShippingAddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartItemState", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany()
                        .HasForeignKey("CartItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartItemUser", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany()
                        .HasForeignKey("CartItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartOrder", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartOrderItem", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartProduct", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartProductVarient", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", null)
                        .WithMany()
                        .HasForeignKey("ProductVarientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartReview", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartSetting", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartShippingAddress", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany()
                        .HasForeignKey("ShippingAddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CartState", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityCountry", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityCoupen", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany()
                        .HasForeignKey("CoupensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityOrder", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityOrderItem", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityProduct", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityProductVarient", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", null)
                        .WithMany()
                        .HasForeignKey("ProductVarientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityReview", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CitySetting", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CityUser", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryCoupen", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany()
                        .HasForeignKey("CoupensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryOrder", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryOrderItem", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryProduct", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryProductVarient", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", null)
                        .WithMany()
                        .HasForeignKey("ProductVarientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryReview", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountrySetting", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountryUser", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoupenOrderItem", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany()
                        .HasForeignKey("CoupensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoupenReview", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany()
                        .HasForeignKey("CoupensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoupenSetting", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany()
                        .HasForeignKey("CoupensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoupenShippingAddress", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany()
                        .HasForeignKey("CoupensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany()
                        .HasForeignKey("ShippingAddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoupenState", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany()
                        .HasForeignKey("CoupensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoupenUser", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany()
                        .HasForeignKey("CoupensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Address", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.State", "State")
                        .WithMany("Addresses")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Cart", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany("Carts")
                        .HasForeignKey("CartItemId");

                    b.HasOne("ECommercePlatform.Server.Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.CartItem", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", "ProductVarient")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVarientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("ProductVarient");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.City", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany("Cities")
                        .HasForeignKey("AddressId");

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany("Cities")
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("ECommercePlatform.Server.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Country", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany("Countries")
                        .HasForeignKey("AddressId");

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany("Countries")
                        .HasForeignKey("ShippingAddressId");

                    b.HasOne("ECommercePlatform.Server.Models.State", null)
                        .WithMany("Countries")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Coupen", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany("Coupens")
                        .HasForeignKey("OrderId");

                    b.HasOne("ECommercePlatform.Server.Models.Product", "Product")
                        .WithMany("Coupens")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", "ProductVarient")
                        .WithMany("Coupens")
                        .HasForeignKey("ProductVarientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductVarient");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Order", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Coupen", "Coupen")
                        .WithMany("Orders")
                        .HasForeignKey("CoupenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderItemId");

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", "ShippingAddress")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coupen");

                    b.Navigation("ShippingAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.OrderItem", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", "ProductVarient")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductVarientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductVarient");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Product", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany("Products")
                        .HasForeignKey("CartItemId");

                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany("Products")
                        .HasForeignKey("CoupenId");

                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderItemId");

                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductVarientId");

                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany("Products")
                        .HasForeignKey("ReviewId");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.ProductVarient", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.CartItem", null)
                        .WithMany("ProductVarients")
                        .HasForeignKey("CartItemId");

                    b.HasOne("ECommercePlatform.Server.Models.Coupen", null)
                        .WithMany("ProductVarients")
                        .HasForeignKey("CoupenId");

                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany("ProductVarients")
                        .HasForeignKey("OrderItemId");

                    b.HasOne("ECommercePlatform.Server.Models.Product", "Product")
                        .WithMany("ProductVarients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Review", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.ShippingAddress", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.City", "City")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Country", "Country")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("OrderId");

                    b.HasOne("ECommercePlatform.Server.Models.State", "State")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", "User")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.State", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany("States")
                        .HasForeignKey("AddressId");

                    b.HasOne("ECommercePlatform.Server.Models.City", null)
                        .WithMany("States")
                        .HasForeignKey("CityId");

                    b.HasOne("ECommercePlatform.Server.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany("States")
                        .HasForeignKey("ShippingAddressId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.User", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Address", null)
                        .WithMany("Users")
                        .HasForeignKey("AddressId");

                    b.HasOne("ECommercePlatform.Server.Models.Cart", null)
                        .WithMany("Users")
                        .HasForeignKey("CartId");

                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany("Users")
                        .HasForeignKey("OrderId");

                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany("Users")
                        .HasForeignKey("ReviewId");

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany("Users")
                        .HasForeignKey("ShippingAddressId");
                });

            modelBuilder.Entity("OrderItemReview", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderItemSetting", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderItemShippingAddress", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany()
                        .HasForeignKey("ShippingAddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderItemState", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderItemUser", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.OrderItem", null)
                        .WithMany()
                        .HasForeignKey("OrderItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderProductVarient", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", null)
                        .WithMany()
                        .HasForeignKey("ProductVarientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderReview", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderSetting", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderState", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSetting", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductShippingAddress", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany()
                        .HasForeignKey("ShippingAddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductState", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductUser", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductVarientReview", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", null)
                        .WithMany()
                        .HasForeignKey("ProductVarientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductVarientSetting", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", null)
                        .WithMany()
                        .HasForeignKey("ProductVarientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductVarientShippingAddress", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", null)
                        .WithMany()
                        .HasForeignKey("ProductVarientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany()
                        .HasForeignKey("ShippingAddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductVarientState", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", null)
                        .WithMany()
                        .HasForeignKey("ProductVarientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductVarientUser", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.ProductVarient", null)
                        .WithMany()
                        .HasForeignKey("ProductVarientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReviewSetting", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReviewShippingAddress", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany()
                        .HasForeignKey("ShippingAddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReviewState", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Review", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SettingShippingAddress", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.ShippingAddress", null)
                        .WithMany()
                        .HasForeignKey("ShippingAddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SettingState", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SettingUser", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.Setting", null)
                        .WithMany()
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StateUser", b =>
                {
                    b.HasOne("ECommercePlatform.Server.Models.State", null)
                        .WithMany()
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommercePlatform.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Address", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("States");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Cart", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.CartItem", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ProductVarients");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ShippingAddresses");

                    b.Navigation("States");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ShippingAddresses");

                    b.Navigation("States");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Coupen", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductVarients");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Order", b =>
                {
                    b.Navigation("Coupens");

                    b.Navigation("OrderItems");

                    b.Navigation("ShippingAddresses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.OrderItem", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductVarients");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Coupens");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductVarients");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.ProductVarient", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Coupens");

                    b.Navigation("OrderItems");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.Review", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.ShippingAddress", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("Orders");

                    b.Navigation("States");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.State", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("ShippingAddresses");
                });

            modelBuilder.Entity("ECommercePlatform.Server.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("ShippingAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
